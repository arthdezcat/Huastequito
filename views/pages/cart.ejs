<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Carrito de Apartado - <%= homeInfo && homeInfo.nombreLocal ? homeInfo.nombreLocal : "Tienda" %></title>
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="stylesheet" href="/css/footer.css">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <link rel="icon" href="<%= homeInfo && homeInfo.iconUrl ? homeInfo.iconUrl : '' %>" type="image/png">
  
  <style>
    .cart-section {
      max-width: 1200px;
      margin: 48px auto 0 auto;
      padding: 0 16px;
    }
    .cart-title {
      font-size: 2.2rem;
      font-weight: 800;
      text-align: center;
      margin-bottom: 32px;
      color: #222;
    }
    .cart-empty {
      text-align: center;
      padding: 60px 20px;
      background: #f8f9fa;
      border-radius: 12px;
      margin: 20px 0;
    }
    .cart-empty i {
      font-size: 4rem;
      color: #6c757d;
      margin-bottom: 20px;
    }
    .cart-empty h3 {
      font-size: 1.5rem;
      color: #495057;
      margin-bottom: 10px;
    }
    .cart-empty p {
      color: #6c757d;
      margin-bottom: 20px;
    }
    .cart-empty .btn {
      background: #007bff;
      color: white;
      padding: 12px 24px;
      border-radius: 6px;
      text-decoration: none;
      display: inline-block;
      transition: background 0.3s;
    }
    .cart-empty .btn:hover {
      background: #0056b3;
    }
    .cart-items {
      background: white;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    .cart-item {
      display: grid;
      grid-template-columns: 120px 1fr auto auto;
      gap: 20px;
      padding: 20px;
      border-bottom: 1px solid #e9ecef;
      align-items: center;
    }
    .cart-item:last-child {
      border-bottom: none;
    }
    .cart-item img {
      width: 120px;
      height: 120px;
      object-fit: cover;
      border-radius: 8px;
    }
    .cart-item-info h4 {
      margin: 0 0 8px 0;
      font-size: 1.2rem;
      color: #333;
    }
    .cart-item-info p {
      margin: 0 0 4px 0;
      color: #666;
      font-size: 0.9rem;
    }
    .cart-item-details {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      margin-top: 8px;
    }
    .cart-item-detail {
      background: #f8f9fa;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 0.8rem;
      color: #495057;
    }
    .cart-item-quantity {
      display: flex;
      align-items: center;
      gap: 10px;
    }
    .quantity-controls {
      display: flex;
      align-items: center;
      border: 1px solid #dee2e6;
      border-radius: 6px;
      overflow: hidden;
    }
    .quantity-btn {
      background: #f8f9fa;
      border: none;
      padding: 8px 12px;
      cursor: pointer;
      transition: background 0.3s;
    }
    .quantity-btn:hover {
      background: #e9ecef;
    }
    .quantity-input {
      border: none;
      padding: 8px 12px;
      text-align: center;
      width: 60px;
      font-size: 1rem;
    }
    .cart-item-price {
      text-align: right;
      font-weight: bold;
      font-size: 1.1rem;
      color: #28a745;
    }
    .cart-item-remove {
      background: #dc3545;
      color: white;
      border: none;
      padding: 8px 12px;
      border-radius: 6px;
      cursor: pointer;
      transition: background 0.3s;
    }
    .cart-item-remove:hover {
      background: #c82333;
    }
    .cart-summary {
      background: white;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      padding: 24px;
      margin-top: 20px;
    }
    .cart-summary-row {
      display: flex;
      justify-content: space-between;
      margin-bottom: 12px;
      font-size: 1.1rem;
    }
    .cart-summary-row.total {
      font-size: 1.3rem;
      font-weight: bold;
      color: #28a745;
      border-top: 2px solid #e9ecef;
      padding-top: 12px;
      margin-top: 12px;
    }
    .cart-actions {
      display: flex;
      gap: 12px;
      margin-top: 20px;
      justify-content: center;
    }
    .cart-btn {
      padding: 12px 24px;
      border-radius: 6px;
      text-decoration: none;
      font-weight: 600;
      transition: all 0.3s;
      border: none;
      cursor: pointer;
    }
    .cart-btn.primary {
      background: #28a745;
      color: white;
    }
    .cart-btn.primary:hover {
      background: #218838;
    }
    .cart-btn.secondary {
      background: #6c757d;
      color: white;
    }
    .cart-btn.secondary:hover {
      background: #545b62;
    }
    .cart-btn.danger {
      background: #dc3545;
      color: white;
    }
    .cart-btn.danger:hover {
      background: #c82333;
    }

    /* Estilos para checkboxes de selección */
    .cart-item-checkbox {
      position: absolute;
      top: 10px;
      left: 10px;
      z-index: 10;
    }

    .cart-item-checkbox input[type="checkbox"] {
      width: 20px;
      height: 20px;
      cursor: pointer;
      accent-color: #28a745;
      transform: scale(1.2);
    }

    .cart-item-checkbox input[type="checkbox"]:checked {
      animation: checkboxPulse 0.3s ease;
    }

    @keyframes checkboxPulse {
      0% { transform: scale(1.2); }
      50% { transform: scale(1.4); }
      100% { transform: scale(1.2); }
    }

    /* Estilos para productos no seleccionados */
    .cart-item:not(.selected) {
      opacity: 0.7;
      filter: grayscale(20%);
      transition: all 0.3s ease;
    }

    .cart-item.selected {
      opacity: 1;
      filter: grayscale(0%);
      border: 2px solid #28a745;
      box-shadow: 0 4px 15px rgba(40, 167, 69, 0.2);
    }

    /* Controles de selección masiva */
    .selection-controls {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
      padding: 16px 20px;
      border-radius: 12px;
      margin-bottom: 20px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      border: 1px solid #dee2e6;
    }

    .selection-controls-left {
      display: flex;
      align-items: center;
      gap: 16px;
    }

    .selection-controls-right {
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .select-all-checkbox {
      display: flex;
      align-items: center;
      gap: 8px;
      font-weight: 600;
      color: #495057;
    }

    .select-all-checkbox input[type="checkbox"] {
      width: 18px;
      height: 18px;
      cursor: pointer;
      accent-color: #28a745;
    }

    .selection-stats {
      background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
      color: white;
      padding: 8px 16px;
      border-radius: 20px;
      font-weight: 600;
      font-size: 0.9rem;
      box-shadow: 0 2px 8px rgba(40, 167, 69, 0.3);
    }

    .selection-actions {
      display: flex;
      gap: 8px;
    }

    .selection-btn {
      background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);
      color: white;
      border: none;
      padding: 6px 12px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 0.8rem;
      font-weight: 600;
      transition: all 0.3s ease;
      box-shadow: 0 2px 6px rgba(108, 117, 125, 0.3);
    }

    .selection-btn:hover {
      background: linear-gradient(135deg, #5a6268 0%, #495057 100%);
      transform: translateY(-1px);
      box-shadow: 0 4px 10px rgba(108, 117, 125, 0.4);
    }

    .selection-btn.danger {
      background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
      box-shadow: 0 2px 6px rgba(220, 53, 69, 0.3);
    }

    .selection-btn.danger:hover {
      background: linear-gradient(135deg, #c82333 0%, #bd2130 100%);
      box-shadow: 0 4px 10px rgba(220, 53, 69, 0.4);
    }

    /* Responsive para controles de selección */
    @media (max-width: 768px) {
      .selection-controls {
        flex-direction: column;
        gap: 12px;
        text-align: center;
      }
      
      .selection-controls-left,
      .selection-controls-right {
        width: 100%;
        justify-content: center;
      }
      
      .selection-actions {
        justify-content: center;
      }
    }
    
    /* Responsive */
    @media (max-width: 768px) {
      .cart-title {
        font-size: 2rem;
        margin-bottom: 30px;
      }
      
      .cart-item {
        grid-template-columns: 100px 1fr;
        gap: 20px;
        padding: 20px;
        position: relative;
      }
      
      .cart-item img {
        width: 100px;
        height: 100px;
        border-radius: 12px;
      }
      
      .cart-item-info h4 {
        font-size: 1.2rem;
        margin-bottom: 8px;
      }
      
      .cart-item-quantity,
      .cart-item-price {
        grid-column: 1 / -1;
        justify-self: start;
        margin-top: 12px;
      }
      
      .cart-item-remove {
        position: absolute;
        top: 15px;
        right: 15px;
        padding: 8px 12px;
        font-size: 0.9rem;
        border-radius: 8px;
      }
      
      .cart-actions {
        flex-direction: column;
        gap: 12px;
      }
      
      .cart-btn {
        width: 100%;
        padding: 14px 24px;
        font-size: 0.95rem;
      }
      
      .cart-summary {
        padding: 24px;
        margin-top: 24px;
      }
      
      .cart-summary-row {
        font-size: 1.1rem;
      }
      
      .cart-summary-row.total {
        font-size: 1.3rem;
      }
    }
    
    @media (max-width: 480px) {
      .cart-section {
        padding: 0 12px;
      }
      
      .cart-title {
        font-size: 1.8rem;
      }
      
      .cart-item {
        grid-template-columns: 80px 1fr;
        gap: 15px;
        padding: 16px;
      }
      
      .cart-item img {
        width: 80px;
        height: 80px;
      }
      
      .cart-item-info h4 {
        font-size: 1.1rem;
      }
      
      .cart-item-info p {
        font-size: 0.9rem;
      }
      
      .cart-item-details {
        gap: 6px;
      }
      
      .cart-item-detail {
        font-size: 0.75rem;
        padding: 4px 8px;
      }
      
      .quantity-controls {
        border-radius: 8px;
      }
      
      .quantity-btn {
        padding: 8px 12px;
        font-size: 1rem;
      }
      
      .quantity-input {
        width: 50px;
        padding: 8px 12px;
        font-size: 1rem;
      }
      
      .cart-item-price {
        font-size: 1.1rem;
      }
      
      .cart-summary {
        padding: 20px;
      }
      
      .cart-summary-row {
        font-size: 1rem;
      }
      
      .cart-summary-row.total {
        font-size: 1.2rem;
      }
    }
    
    /* Logo y fondo semi-transparente */
    .logo-background {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-image: url('<%= homeInfo && homeInfo.logoUrl ? homeInfo.logoUrl : "" %>');
      background-size: contain;
      background-repeat: no-repeat;
      background-position: center;
      opacity: 0.15;
      z-index: -1;
      pointer-events: none;
    }

    /* Estilos para notificaciones toast profesionales */
    .toast-container {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 9999;
      pointer-events: none;
    }

    .toast {
      background: white;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      margin-bottom: 10px;
      padding: 16px 20px;
      min-width: 300px;
      max-width: 400px;
      transform: translateX(100%);
      transition: all 0.3s ease;
      pointer-events: auto;
      border-left: 4px solid #28a745;
      position: relative;
      overflow: hidden;
    }

    .toast.show {
      transform: translateX(0);
    }

    .toast.success {
      border-left-color: #28a745;
    }

    .toast.error {
      border-left-color: #dc3545;
    }

    .toast.warning {
      border-left-color: #ffc107;
    }

    .toast.info {
      border-left-color: #17a2b8;
    }

    .toast-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 8px;
    }

    .toast-title {
      font-weight: 600;
      font-size: 1rem;
      color: #333;
      margin: 0;
    }

    .toast-close {
      background: none;
      border: none;
      font-size: 1.2rem;
      cursor: pointer;
      color: #999;
      padding: 0;
      width: 20px;
      height: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .toast-close:hover {
      color: #333;
    }

    .toast-message {
      color: #666;
      font-size: 0.9rem;
      line-height: 1.4;
      margin: 0;
    }

    .toast-icon {
      margin-right: 8px;
      font-size: 1.1rem;
    }

    .toast.success .toast-icon {
      color: #28a745;
    }

    .toast.error .toast-icon {
      color: #dc3545;
    }

    .toast.warning .toast-icon {
      color: #ffc107;
    }

    .toast.info .toast-icon {
      color: #17a2b8;
    }

    /* Animación de entrada y salida */
    @keyframes slideInRight {
      from {
        transform: translateX(100%);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }

    @keyframes slideOutRight {
      from {
        transform: translateX(0);
        opacity: 1;
      }
      to {
        transform: translateX(100%);
        opacity: 0;
      }
    }

    .toast.animate-in {
      animation: slideInRight 0.3s ease forwards;
    }

    .toast.animate-out {
      animation: slideOutRight 0.3s ease forwards;
    }

    /* Responsive para notificaciones */
    @media (max-width: 768px) {
      .toast-container {
        top: 10px;
        right: 10px;
        left: 10px;
      }
      
      .toast {
        min-width: auto;
        max-width: none;
        width: 100%;
      }
    }

    /* Modal para procesar apartado */
    .process-modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.8);
      backdrop-filter: blur(5px);
    }

    /* Modal informativo temporal */
    .info-modal {
      display: none;
      position: fixed;
      z-index: 1001;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.8);
      backdrop-filter: blur(5px);
    }

    .info-modal.active {
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .info-content {
      background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
      padding: 32px;
      border-radius: 20px;
      max-width: 500px;
      width: 90%;
      text-align: center;
      box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
      border: 1px solid rgba(255, 255, 255, 0.2);
      animation: infoSlideIn 0.5s ease-out;
    }

    @keyframes infoSlideIn {
      from {
        opacity: 0;
        transform: translateY(-50px) scale(0.9);
      }
      to {
        opacity: 1;
        transform: translateY(0) scale(1);
      }
    }

    .info-icon {
      font-size: 4rem;
      color: #28a745;
      margin-bottom: 20px;
      animation: pulse 2s infinite;
    }

    @keyframes pulse {
      0% {
        transform: scale(1);
      }
      50% {
        transform: scale(1.1);
      }
      100% {
        transform: scale(1);
      }
    }

    .info-title {
      font-size: 1.5rem;
      font-weight: bold;
      color: #2c3e50;
      margin-bottom: 16px;
    }

    .info-description {
      color: #6c757d;
      font-size: 1rem;
      line-height: 1.6;
      margin-bottom: 24px;
    }

    .info-features {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-bottom: 24px;
      flex-wrap: wrap;
    }

    .info-feature {
      display: flex;
      align-items: center;
      gap: 8px;
      color: #495057;
      font-size: 0.9rem;
    }

    .info-feature i {
      color: #28a745;
      font-size: 1.1rem;
    }

    .info-btn {
      background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
      color: white;
      border: none;
      padding: 12px 32px;
      border-radius: 12px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
    }

    .info-btn:hover {
      background: linear-gradient(135deg, #20c997 0%, #17a2b8 100%);
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(40, 167, 69, 0.4);
    }

    /* Responsive para el modal informativo */
    @media (max-width: 768px) {
      .info-content {
        padding: 24px;
        margin: 20px;
      }
      
      .info-icon {
        font-size: 3rem;
      }
      
      .info-title {
        font-size: 1.3rem;
      }
      
      .info-features {
        flex-direction: column;
        gap: 12px;
      }
    }

    .process-modal.active {
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .process-content {
      background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
      padding: 32px;
      border-radius: 20px;
      max-width: 500px;
      width: 90%;
      max-height: 80vh;
      overflow-y: auto;
      box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .process-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 24px;
      border-bottom: 3px solid #e9ecef;
      padding-bottom: 16px;
    }

    .process-title {
      font-size: 1.5rem;
      font-weight: bold;
      color: #2c3e50;
      margin: 0;
    }

    .process-close {
      background: none;
      border: none;
      font-size: 1.8rem;
      cursor: pointer;
      color: #6c757d;
      padding: 0;
      width: 30px;
      height: 30px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      transition: all 0.3s ease;
    }

    .process-close:hover {
      background: #e9ecef;
      color: #495057;
    }

    .process-description {
      color: #6c757d;
      font-size: 1rem;
      line-height: 1.5;
      margin-bottom: 24px;
      text-align: center;
    }

    .process-options {
      display: flex;
      flex-direction: column;
      gap: 16px;
    }

    .process-option {
      display: flex;
      align-items: center;
      padding: 20px;
      border-radius: 12px;
      cursor: pointer;
      transition: all 0.3s ease;
      border: 2px solid transparent;
      background: white;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .process-option:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
      border-color: #007bff;
    }

    .process-option-icon {
      width: 50px;
      height: 50px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.5rem;
      color: white;
      margin-right: 16px;
      flex-shrink: 0;
    }

    .process-option.whatsapp .process-option-icon {
      background: linear-gradient(135deg, #25d366 0%, #128c7e 100%);
    }

    .process-option.email .process-option-icon {
      background: linear-gradient(135deg, #ea4335 0%, #d93025 100%);
    }

    .process-option.messenger .process-option-icon {
      background: linear-gradient(135deg, #0084ff 0%, #0066cc 100%);
    }

    .process-option-content {
      flex: 1;
    }

    .process-option-title {
      font-size: 1.1rem;
      font-weight: 600;
      color: #2c3e50;
      margin: 0 0 4px 0;
    }

    .process-option-description {
      font-size: 0.9rem;
      color: #6c757d;
      margin: 0;
    }

    .process-option-arrow {
      color: #6c757d;
      font-size: 1.2rem;
      transition: transform 0.3s ease;
    }

    .process-option:hover .process-option-arrow {
      transform: translateX(5px);
      color: #007bff;
    }

    /* Responsive para el modal */
    @media (max-width: 768px) {
      .process-content {
        padding: 24px;
        margin: 20px;
      }
      
      .process-title {
        font-size: 1.3rem;
      }
      
      .process-option {
        padding: 16px;
      }
      
      .process-option-icon {
        width: 40px;
        height: 40px;
        font-size: 1.2rem;
        margin-right: 12px;
      }
      
      .process-option-title {
        font-size: 1rem;
      }
      
      .process-option-description {
        font-size: 0.85rem;
      }
    }
  </style>
</head>
<body style="<% if (homeInfo && homeInfo.colorFondo) { %>background:<%= homeInfo.colorFondo %>;<% } else if (homeInfo && homeInfo.fondoUrl) { %>background-image:url('<%= homeInfo.fondoUrl %>');background-size:cover;background-position:center;<% } else if (homeInfo && homeInfo.fondoFileUrl) { %>background-image:url('<%= homeInfo.fondoFileUrl %>');background-size:cover;background-position:center;<% } %>;transition: background 3s ease-in-out;">
  
  <%- include('../partials/header') %>
  
  <% if (homeInfo && homeInfo.logoUrl) { %>
  <div class="logo-background"></div>
  <% } %>
  
  <section class="cart-section">
    <h2 class="cart-title">
      <i class="fas fa-shopping-cart"></i> Carrito de Apartado
    </h2>
       
    <!-- Controles de selección masiva -->
    <div class="selection-controls" id="selectionControls" style="display: none;">
      <div class="selection-controls-left">
        <div class="select-all-checkbox">
          <input type="checkbox" id="selectAllCheckbox" onchange="toggleSelectAll()">
          <label for="selectAllCheckbox">Seleccionar Todos</label>
        </div>
        <div class="selection-stats" id="selectionStats">
          <i class="fas fa-check-circle"></i> 0 productos seleccionados
        </div>
      </div>
      
      <div class="selection-controls-right">
        <div class="selection-actions">
          <button class="selection-btn" onclick="selectAll()">
            <i class="fas fa-check-double"></i> Seleccionar Todo
          </button>
          <button class="selection-btn" onclick="deselectAll()">
            <i class="fas fa-times"></i> Deseleccionar Todo
          </button>
          <button class="selection-btn danger" onclick="removeSelected()">
            <i class="fas fa-trash"></i> Eliminar Seleccionados
          </button>
        </div>
      </div>
    </div>
    
    <% if (!cart || cart.items.length === 0) { %>
      <div class="cart-empty">
        <i class="fas fa-shopping-cart"></i>
        <h3>Tu carrito está vacío</h3>
        <p>No tienes productos apartados en tu carrito.</p>
        <a href="/services" class="btn">Ver Productos</a>
        <a href="/galeria" class="btn" style="margin-left: 10px;">Ver Ofertas</a>
      </div>
    <% } else { %>
      <div class="cart-items">
        <% cart.items.forEach(item => { %>
          <div class="cart-item" data-item-id="<%= item._id %>">
            <!-- Checkbox de selección -->
            <div class="cart-item-checkbox">
              <input type="checkbox" id="checkbox-<%= item._id %>" onchange="toggleItemSelection('<%= item._id %>')">
            </div>
            
            <img src="<%= item.image %>" alt="<%= item.title %>">
            
            <div class="cart-item-info">
              <h4><%= item.title %></h4>
              <p><%= item.description %></p>
              
              <div class="cart-item-details">
                <% if (item.colorSeleccionado) { %>
                  <span class="cart-item-detail">
                    <i class="fas fa-palette"></i> Color: <%= item.colorSeleccionado %>
                  </span>
                <% } %>
                <% if (item.tallaSeleccionada) { %>
                  <span class="cart-item-detail">
                    <i class="fas fa-ruler"></i> Talla: <%= item.tallaSeleccionada %>
                  </span>
                <% } %>
                <% if (item.garantia) { %>
                  <span class="cart-item-detail">
                    <i class="fas fa-shield-alt"></i> Garantía: <%= item.garantia %>
                  </span>
                <% } %>
                <% if (item.tipoOferta) { %>
                  <span class="cart-item-detail" style="background: #fff3cd; color: #856404;">
                    <i class="fas fa-tag"></i> <%= item.tipoOferta %>
                  </span>
                <% } %>
                <% if (item.ofertaEspecial) { %>
                  <span class="cart-item-detail" style="background: #f8d7da; color: #721c24;">
                    <i class="fas fa-star"></i> <%= item.ofertaEspecial %>
                  </span>
                <% } %>
                <% if (item.porcentajeDescuento) { %>
                  <span class="cart-item-detail" style="background: #d4edda; color: #155724;">
                    <i class="fas fa-percentage"></i> <%= item.porcentajeDescuento %>% descuento
                  </span>
                <% } %>
              </div>
            </div>
            
            <div class="cart-item-quantity">
              <div class="quantity-controls">
                <button class="quantity-btn" onclick="updateQuantity('<%= item._id %>', -1)">-</button>
                <input type="number" class="quantity-input" value="<%= item.cantidad %>" min="1" 
                       onchange="updateQuantityDirect('<%= item._id %>', this.value)">
                <button class="quantity-btn" onclick="updateQuantity('<%= item._id %>', 1)">+</button>
              </div>
            </div>
            
            <div class="cart-item-price">
              $<%= (item.price * item.cantidad).toFixed(2) %>
            </div>
            
            <button class="cart-item-remove" onclick="removeItem('<%= item._id %>')" title="Eliminar del carrito">
              <i class="fas fa-trash"></i>
            </button>
          </div>
        <% }); %>
      </div>
      
      <div class="cart-summary">
        <div class="cart-summary-row">
          <span>Total de productos:</span>
          <span id="totalProductsDisplay"><%= totalItems %></span>
        </div>
        <div class="cart-summary-row total">
          <span>Total a pagar:</span>
          <span id="totalPriceDisplay">$<%= total.toFixed(2) %></span>
        </div>
        
        <div class="cart-actions">
          <a href="/services" class="cart-btn secondary">
            <i class="fas fa-plus"></i> Seguir Comprando
          </a>
          <a href="/galeria" class="cart-btn secondary">
            <i class="fas fa-tag"></i> Ver Ofertas
          </a>
          <button class="cart-btn primary" onclick="showInfoModal()" id="processButton">
            <i class="fas fa-check"></i> Procesar Apartado
          </button>
          <button class="cart-btn danger" onclick="clearCart()">
            <i class="fas fa-trash"></i> Limpiar Carrito
          </button>
        </div>
      </div>
    <% } %>
    
    <%- include('../partials/footer') %>
  </section>
  
  <!-- Contenedor de notificaciones toast -->
  <div class="toast-container" id="toastContainer"></div>
  
  <!-- Modal informativo temporal -->
  <div class="info-modal" id="infoModal">
    <div class="info-content">
      <div class="info-icon">
        <i class="fas fa-info-circle"></i>
      </div>
      
      <h3 class="info-title">¡Procesar Apartado Fácilmente!</h3>
      
      <p class="info-description">
        Puedes enviar tu solicitud de apartado de todos los productos seleccionados por WhatsApp, Facebook Messenger o Gmail. Solo necesitas llenar tus datos y continuar con el proceso de envío.
      </p>
      
      <div class="info-features">
        <div class="info-feature">
          <i class="fab fa-whatsapp"></i>
          <span>WhatsApp</span>
        </div>
        <div class="info-feature">
          <i class="fab fa-facebook-messenger"></i>
          <span>Messenger</span>
        </div>
        <div class="info-feature">
          <i class="fas fa-envelope"></i>
          <span>Gmail</span>
        </div>
      </div>
      
      <button class="info-btn" onclick="closeInfoModal()">
        <i class="fas fa-check"></i> Entendido, Continuar
      </button>
    </div>
  </div>
  
  <!-- Modal para procesar apartado -->
  <div class="process-modal" id="processModal">
    <div class="process-content">
      <div class="process-header">
        <h3 class="process-title">
          <i class="fas fa-shopping-cart"></i> Procesar Apartado
        </h3>
        <button class="process-close" onclick="closeProcessModal()">&times;</button>
      </div>
      
      <p class="process-description">
        Selecciona cómo quieres contactar para completar tu apartado:
      </p>
      
      <div class="process-options">
        <div class="process-option whatsapp" onclick="showClientInfoModal('whatsapp')">
          <div class="process-option-icon">
            <i class="fab fa-whatsapp"></i>
          </div>
          <div class="process-option-content">
            <h4 class="process-option-title">WhatsApp</h4>
            <p class="process-option-description">Enviar mensaje directo por WhatsApp</p>
          </div>
          <div class="process-option-arrow">
            <i class="fas fa-chevron-right"></i>
          </div>
        </div>
        
        <div class="process-option email" onclick="showClientInfoModal('email')">
          <div class="process-option-icon">
            <i class="fas fa-envelope"></i>
          </div>
          <div class="process-option-content">
            <h4 class="process-option-title">Gmail</h4>
            <p class="process-option-description">Enviar correo electrónico</p>
          </div>
          <div class="process-option-arrow">
            <i class="fas fa-chevron-right"></i>
          </div>
        </div>
        
        <div class="process-option messenger" onclick="showClientInfoModal('messenger')">
          <div class="process-option-icon">
            <i class="fab fa-facebook-messenger"></i>
          </div>
          <div class="process-option-content">
            <h4 class="process-option-title">Messenger</h4>
            <p class="process-option-description">Enviar mensaje por Facebook Messenger</p>
          </div>
          <div class="process-option-arrow">
            <i class="fas fa-chevron-right"></i>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal para información del cliente -->
  <div class="process-modal" id="clientInfoModal">
    <div class="process-content">
      <div class="process-header">
        <h3 class="process-title">
          <i class="fas fa-user"></i> Información del Cliente
        </h3>
        <button class="process-close" onclick="closeClientInfoModal()">&times;</button>
      </div>
      
      <p class="process-description">
        Completa tu información para procesar el apartado:
      </p>
      
      <form id="clientInfoForm">
        <div class="form-group">
          <label for="clientName">Nombre completo *</label>
          <input type="text" id="clientName" name="clientName" required placeholder="Ingresa tu nombre completo">
        </div>
        
        <div class="form-group">
          <label for="pickupDate">Fecha de recogida (opcional)</label>
          <input type="text" id="pickupDate" name="pickupDate" placeholder="Ej: Lunes 15 de enero, 2:00 PM">
        </div>
        
        <div class="add-to-cart-actions">
          <button type="button" class="btn-cancel" onclick="closeClientInfoModal()">Cancelar</button>
          <button type="submit" class="btn-add">Continuar</button>
        </div>
      </form>
    </div>
  </div>
  
  <script>
    // Función para mostrar notificaciones toast
    function showToast(type, title, message, duration = 4000) {
      const container = document.getElementById('toastContainer');
      const toast = document.createElement('div');
      toast.className = `toast ${type}`;
      
      const icon = type === 'success' ? 'fas fa-check-circle' :
                   type === 'error' ? 'fas fa-exclamation-circle' :
                   type === 'warning' ? 'fas fa-exclamation-triangle' :
                   'fas fa-info-circle';
      
      toast.innerHTML = `
        <div class="toast-header">
          <h4 class="toast-title">
            <i class="toast-icon ${icon}"></i>
            ${title}
          </h4>
          <button class="toast-close" onclick="this.parentElement.parentElement.remove()">&times;</button>
        </div>
        <p class="toast-message">${message}</p>
      `;
      
      container.appendChild(toast);
      
      // Animar entrada
      setTimeout(() => {
        toast.classList.add('show');
      }, 100);
      
      // Auto-remover después del tiempo especificado
      setTimeout(() => {
        toast.classList.add('animate-out');
        setTimeout(() => {
          if (toast.parentElement) {
            toast.remove();
          }
        }, 300);
      }, duration);
    }
    // Función para actualizar cantidad
    function updateQuantity(itemId, change) {
      const input = document.querySelector(`[data-item-id="${itemId}"] .quantity-input`);
      const newQuantity = parseInt(input.value) + change;
      if (newQuantity >= 1) {
        updateQuantityDirect(itemId, newQuantity);
      }
    }
    
    // Función para actualizar cantidad directamente
    function updateQuantityDirect(itemId, cantidad) {
      fetch('/cart/update', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          itemId: itemId,
          cantidad: parseInt(cantidad)
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          showToast('success', '¡Actualizado!', 'Cantidad actualizada correctamente');
          setTimeout(() => {
            location.reload(); // Recargar para mostrar cambios
          }, 1500);
        } else {
          showToast('error', 'Error', 'Error al actualizar cantidad: ' + data.message);
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showToast('error', 'Error', 'Error de conexión al actualizar cantidad');
      });
    }
    
    // Función para eliminar item
    function removeItem(itemId) {
      if (confirm('¿Estás seguro de que quieres eliminar este producto del carrito?')) {
        fetch(`/cart/remove/${itemId}`, {
          method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            showToast('success', '¡Eliminado!', 'Producto eliminado del carrito correctamente');
            setTimeout(() => {
              location.reload(); // Recargar para mostrar cambios
            }, 1500);
          } else {
            showToast('error', 'Error', 'Error al eliminar producto: ' + data.message);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showToast('error', 'Error', 'Error de conexión al eliminar producto');
        });
      }
    }
    
    // Función para limpiar carrito
    function clearCart() {
      if (confirm('¿Estás seguro de que quieres limpiar todo el carrito?')) {
        fetch('/cart/clear', {
          method: 'POST'
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            showToast('success', '¡Carrito limpiado!', 'Todos los productos han sido eliminados del carrito');
            setTimeout(() => {
              location.reload(); // Recargar para mostrar cambios
            }, 1500);
          } else {
            showToast('error', 'Error', 'Error al limpiar carrito: ' + data.message);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showToast('error', 'Error', 'Error de conexión al limpiar carrito');
        });
      }
    }
    
    // Función para mostrar el modal informativo
    function showInfoModal() {
      document.getElementById('infoModal').classList.add('active');
    }

    // Función para cerrar el modal informativo
    function closeInfoModal() {
      document.getElementById('infoModal').classList.remove('active');
      // Mostrar el modal de procesamiento después de cerrar el informativo
      setTimeout(() => {
        document.getElementById('processModal').classList.add('active');
      }, 300);
    }

    // Función para mostrar el modal de procesamiento
    function showProcessModal() {
      document.getElementById('processModal').classList.add('active');
    }

    // Función para cerrar el modal de procesamiento
    function closeProcessModal() {
      document.getElementById('processModal').classList.remove('active');
    }

    // Variables globales para el procesamiento
    let selectedMethod = '';

    // Función para mostrar el modal de información del cliente
    function showClientInfoModal(method) {
      selectedMethod = method;
      closeProcessModal();
      document.getElementById('clientInfoModal').classList.add('active');
    }

    // Función para cerrar el modal de información del cliente
    function closeClientInfoModal() {
      document.getElementById('clientInfoModal').classList.remove('active');
      document.getElementById('clientInfoForm').reset();
    }

    // Función para procesar apartado según el método seleccionado
    function processApartado(clientName, pickupDate) {
      // Obtener datos del carrito para el mensaje
      const cartItems = document.querySelectorAll('.cart-item');
      const currentDate = new Date().toLocaleDateString('es-ES', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
      
      let message = `🛒 *SOLICITUD DE APARTADO*\n\n`;
      message += `👤 *Cliente:* ${clientName}\n`;
      message += `📅 *Fecha de apartado:* ${currentDate}\n`;
      
      if (pickupDate && pickupDate.trim() !== '') {
        message += `📦 *Fecha de recogida:* ${pickupDate}\n`;
      }
      
      message += `\n📋 *PRODUCTOS A APARTAR:*\n`;
      message += `━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n`;
      
      let total = 0;
      let totalItems = 0;

      cartItems.forEach((item, index) => {
        const title = item.querySelector('h4').textContent;
        const quantity = item.querySelector('.quantity-input').value;
        const price = parseFloat(item.querySelector('.cart-item-price').textContent.replace('$', ''));
        const itemTotal = price;
        
        message += `${index + 1}. *${title}*\n`;
        message += `   • Cantidad: ${quantity}\n`;
        message += `   • Precio unitario: $${(itemTotal / parseInt(quantity)).toFixed(2)}\n`;
        message += `   • Subtotal: $${itemTotal.toFixed(2)}\n`;
        
        // Obtener detalles adicionales del producto
        const details = item.querySelectorAll('.cart-item-detail');
        details.forEach(detail => {
          const detailText = detail.textContent.trim();
          if (detailText.includes('Color:')) {
            message += `   • ${detailText}\n`;
          } else if (detailText.includes('Talla:')) {
            message += `   • ${detailText}\n`;
          } else if (detailText.includes('Garantía:')) {
            message += `   • ${detailText}\n`;
          } else if (detailText.includes('descuento')) {
            message += `   • ${detailText}\n`;
          } else if (detailText.includes('oferta')) {
            message += `   • ${detailText}\n`;
          }
        });
        
        message += `\n`;
        total += itemTotal;
        totalItems += parseInt(quantity);
      });

      message += `━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n`;
      message += `📊 *RESUMEN:*\n`;
      message += `• Total de productos: ${totalItems}\n`;
      message += `• Total a pagar: *$${total.toFixed(2)}*\n\n`;
      
      message += `✅ *CONFIRMACIÓN:*\n`;
      message += `Por favor, confirma mi apartado y proporciona las instrucciones para el pago y recogida.\n\n`;
      
      message += `📞 *CONTACTO:*\n`;
      message += `Cliente: ${clientName}\n`;
      message += `Fecha de apartado: ${currentDate}`;
      
      if (pickupDate && pickupDate.trim() !== '') {
        message += `\nFecha de recogida: ${pickupDate}`;
      }

      // Obtener enlaces de contacto desde el servidor
      fetch('/get-contact-links')
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            let url = '';
            
            switch(method) {
              case 'whatsapp':
                if (data.whatsappUrl) {
                  const whatsappMessage = encodeURIComponent(message);
                  url = `${data.whatsappUrl}&text=${whatsappMessage}`;
                } else {
                  showToast('error', 'Error', 'No hay enlace de WhatsApp configurado');
                  return;
                }
                break;
                
              case 'email':
                if (data.emailUrl) {
                  const emailSubject = encodeURIComponent('Apartado de Productos');
                  const emailBody = encodeURIComponent(message);
                  url = `${data.emailUrl}?subject=${emailSubject}&body=${emailBody}`;
                } else {
                  showToast('error', 'Error', 'No hay enlace de email configurado');
                  return;
                }
                break;
                
              case 'messenger':
                if (data.messengerUrl) {
                  const messengerMessage = encodeURIComponent(message);
                  url = `${data.messengerUrl}&text=${messengerMessage}`;
                } else {
                  showToast('error', 'Error', 'No hay enlace de Messenger configurado');
                  return;
                }
                break;
            }
            
            if (url) {
              window.open(url, '_blank');
              closeProcessModal();
              showToast('success', '¡Enviado!', `Mensaje enviado por ${method === 'whatsapp' ? 'WhatsApp' : method === 'email' ? 'Gmail' : 'Messenger'}`);
            }
          } else {
            showToast('error', 'Error', 'No se pudieron obtener los enlaces de contacto');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showToast('error', 'Error', 'Error al obtener enlaces de contacto');
        });
    }

    // Manejar envío del formulario de información del cliente
    document.getElementById('clientInfoForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      const formData = new FormData(this);
      const clientName = formData.get('clientName');
      const pickupDate = formData.get('pickupDate');
      
      if (!clientName || clientName.trim() === '') {
        showToast('warning', 'Nombre requerido', 'Debes ingresar tu nombre para continuar');
        return;
      }
      
      // Procesar el apartado con la información del cliente
      processApartado(clientName, pickupDate);
    });

    // Cerrar modal al hacer clic fuera de él
    document.getElementById('processModal').addEventListener('click', function(e) {
      if (e.target === this) {
        closeProcessModal();
      }
    });

    // Cerrar modal informativo al hacer clic fuera de él
    document.getElementById('infoModal').addEventListener('click', function(e) {
      if (e.target === this) {
        closeInfoModal();
      }
    });

    // Cerrar modal de información del cliente al hacer clic fuera de él
    document.getElementById('clientInfoModal').addEventListener('click', function(e) {
      if (e.target === this) {
        closeClientInfoModal();
      }
    });
    
    // Función de prueba para verificar sesiones
    function testSession() {
      fetch('/test-session')
        .then(response => response.json())
        .then(data => {
          console.log('Session data:', data);
          showToast('info', 'Datos de Sesión', `Session ID: ${data.sessionID}\nCart Count: ${data.cartCount}\nCart Total: ${data.cartTotal}`);
        })
        .catch(error => {
          console.error('Error:', error);
          showToast('error', 'Error', 'Error al obtener datos de sesión');
        });
    }

    // Variables globales para selección de productos
    let selectedItems = new Set();
    let totalCartItems = <%= cart && cart.items ? cart.items.length : 0 %>;

    // Función para mostrar/ocultar controles de selección
    function toggleSelectionControls() {
      const controls = document.getElementById('selectionControls');
      if (totalCartItems > 1) {
        controls.style.display = 'flex';
      } else {
        controls.style.display = 'none';
      }
    }

    // Función para alternar selección de un item
    function toggleItemSelection(itemId) {
      const checkbox = document.getElementById(`checkbox-${itemId}`);
      const cartItem = document.querySelector(`[data-item-id="${itemId}"]`);
      
      if (checkbox.checked) {
        selectedItems.add(itemId);
        cartItem.classList.add('selected');
      } else {
        selectedItems.delete(itemId);
        cartItem.classList.remove('selected');
      }
      
      updateSelectionStats();
      updateProcessButton();
    }

    // Función para alternar selección de todos
    function toggleSelectAll() {
      const selectAllCheckbox = document.getElementById('selectAllCheckbox');
      const checkboxes = document.querySelectorAll('.cart-item-checkbox input[type="checkbox"]');
      
      checkboxes.forEach(checkbox => {
        checkbox.checked = selectAllCheckbox.checked;
        const itemId = checkbox.id.replace('checkbox-', '');
        const cartItem = document.querySelector(`[data-item-id="${itemId}"]`);
        
        if (selectAllCheckbox.checked) {
          selectedItems.add(itemId);
          cartItem.classList.add('selected');
        } else {
          selectedItems.delete(itemId);
          cartItem.classList.remove('selected');
        }
      });
      
      updateSelectionStats();
      updateProcessButton();
    }

    // Función para seleccionar todos
    function selectAll() {
      const selectAllCheckbox = document.getElementById('selectAllCheckbox');
      selectAllCheckbox.checked = true;
      toggleSelectAll();
    }

    // Función para deseleccionar todos
    function deselectAll() {
      const selectAllCheckbox = document.getElementById('selectAllCheckbox');
      selectAllCheckbox.checked = false;
      toggleSelectAll();
    }

    // Función para eliminar productos seleccionados
    function removeSelected() {
      if (selectedItems.size === 0) {
        showToast('warning', 'Sin selección', 'No hay productos seleccionados para eliminar');
        return;
      }
      
      if (confirm(`¿Estás seguro de que quieres eliminar ${selectedItems.size} producto(s) seleccionado(s) del carrito?`)) {
        const promises = Array.from(selectedItems).map(itemId => 
          fetch(`/cart/remove/${itemId}`, { method: 'DELETE' })
        );
        
        Promise.all(promises)
          .then(responses => Promise.all(responses.map(r => r.json())))
          .then(results => {
            const successCount = results.filter(r => r.success).length;
            if (successCount > 0) {
              showToast('success', '¡Eliminados!', `${successCount} producto(s) eliminado(s) del carrito`);
              setTimeout(() => {
                location.reload();
              }, 1500);
            } else {
              showToast('error', 'Error', 'Error al eliminar productos seleccionados');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            showToast('error', 'Error', 'Error de conexión al eliminar productos');
          });
      }
    }

    // Función para actualizar estadísticas de selección
    function updateSelectionStats() {
      const statsElement = document.getElementById('selectionStats');
      const selectAllCheckbox = document.getElementById('selectAllCheckbox');
      
      statsElement.innerHTML = `<i class="fas fa-check-circle"></i> ${selectedItems.size} producto(s) seleccionado(s)`;
      
      // Actualizar checkbox "Seleccionar Todos"
      if (selectedItems.size === 0) {
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = false;
      } else if (selectedItems.size === totalCartItems) {
        selectAllCheckbox.checked = true;
        selectAllCheckbox.indeterminate = false;
      } else {
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = true;
      }
      
      // Actualizar totales del carrito
      updateCartTotals();
    }

    // Función para actualizar estado del botón de procesar
    function updateProcessButton() {
      const processButton = document.getElementById('processButton');
      
      if (selectedItems.size === 0) {
        processButton.disabled = true;
        processButton.style.opacity = '0.5';
        processButton.style.cursor = 'not-allowed';
        processButton.innerHTML = '<i class="fas fa-check"></i> Selecciona productos para procesar';
      } else {
        processButton.disabled = false;
        processButton.style.opacity = '1';
        processButton.style.cursor = 'pointer';
        processButton.innerHTML = `<i class="fas fa-check"></i> Procesar Apartado (${selectedItems.size})`;
      }
    }

    // Función para actualizar totales del carrito basados en selección
    function updateCartTotals() {
      const totalProductsDisplay = document.getElementById('totalProductsDisplay');
      const totalPriceDisplay = document.getElementById('totalPriceDisplay');
      
      if (selectedItems.size === 0) {
        // Si no hay productos seleccionados, mostrar todos los productos del carrito
        totalProductsDisplay.textContent = '<%= totalItems %>';
        totalProductsDisplay.style.color = '#6c757d';
        totalProductsDisplay.style.fontStyle = 'italic';
        
        totalPriceDisplay.textContent = '$<%= total.toFixed(2) %>';
        totalPriceDisplay.style.color = '#6c757d';
        totalPriceDisplay.style.fontStyle = 'italic';
      } else {
        // Calcular totales solo de productos seleccionados
        let selectedTotalItems = 0;
        let selectedTotalPrice = 0;
        
        selectedItems.forEach(itemId => {
          const cartItem = document.querySelector(`[data-item-id="${itemId}"]`);
          if (cartItem) {
            const quantity = parseInt(cartItem.querySelector('.quantity-input').value);
            const priceText = cartItem.querySelector('.cart-item-price').textContent.replace('$', '');
            const price = parseFloat(priceText);
            
            selectedTotalItems += quantity;
            selectedTotalPrice += price;
          }
        });
        
        // Mostrar totales de productos seleccionados
        totalProductsDisplay.textContent = selectedTotalItems;
        totalProductsDisplay.style.color = '#28a745';
        totalProductsDisplay.style.fontStyle = 'normal';
        
        totalPriceDisplay.textContent = `$${selectedTotalPrice.toFixed(2)}`;
        totalPriceDisplay.style.color = '#28a745';
        totalPriceDisplay.style.fontStyle = 'normal';
      }
    }

    // Función modificada para procesar apartado solo con productos seleccionados
    function processApartado(clientName, pickupDate) {
      // Obtener solo los productos seleccionados
      const selectedCartItems = Array.from(selectedItems).map(itemId => 
        document.querySelector(`[data-item-id="${itemId}"]`)
      ).filter(item => item !== null);
      
      if (selectedCartItems.length === 0) {
        showToast('warning', 'Sin selección', 'No hay productos seleccionados para procesar');
        return;
      }
      
      const currentDate = new Date().toLocaleDateString('es-ES', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
      
      let message = `🛒 *SOLICITUD DE APARTADO*\n\n`;
      message += `👤 *Cliente:* ${clientName}\n`;
      message += `📅 *Fecha de apartado:* ${currentDate}\n`;
      
      if (pickupDate && pickupDate.trim() !== '') {
        message += `📦 *Fecha de recogida:* ${pickupDate}\n`;
      }
      
      message += `\n📋 *PRODUCTOS A APARTAR:*\n`;
      message += `━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n`;
      
      let total = 0;
      let totalItems = 0;

      selectedCartItems.forEach((item, index) => {
        const title = item.querySelector('h4').textContent;
        const quantity = item.querySelector('.quantity-input').value;
        const price = parseFloat(item.querySelector('.cart-item-price').textContent.replace('$', ''));
        const itemTotal = price;
        
        message += `${index + 1}. *${title}*\n`;
        message += `   • Cantidad: ${quantity}\n`;
        message += `   • Precio unitario: $${(itemTotal / parseInt(quantity)).toFixed(2)}\n`;
        message += `   • Subtotal: $${itemTotal.toFixed(2)}\n`;
        
        // Obtener detalles adicionales del producto
        const details = item.querySelectorAll('.cart-item-detail');
        details.forEach(detail => {
          const detailText = detail.textContent.trim();
          if (detailText.includes('Color:')) {
            message += `   • ${detailText}\n`;
          } else if (detailText.includes('Talla:')) {
            message += `   • ${detailText}\n`;
          } else if (detailText.includes('Garantía:')) {
            message += `   • ${detailText}\n`;
          } else if (detailText.includes('descuento')) {
            message += `   • ${detailText}\n`;
          } else if (detailText.includes('oferta')) {
            message += `   • ${detailText}\n`;
          }
        });
        
        message += `\n`;
        total += itemTotal;
        totalItems += parseInt(quantity);
      });

      message += `━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n`;
      message += `📊 *RESUMEN:*\n`;
      message += `• Total de productos: ${totalItems}\n`;
      message += `• Total a pagar: *$${total.toFixed(2)}*\n\n`;
      
      message += `✅ *CONFIRMACIÓN:*\n`;
      message += `Por favor, confirma mi apartado y proporciona las instrucciones para el pago y recogida.\n\n`;
      
      message += `📞 *CONTACTO:*\n`;
      message += `Cliente: ${clientName}\n`;
      message += `Fecha de apartado: ${currentDate}`;
      
      if (pickupDate && pickupDate.trim() !== '') {
        message += `\nFecha de recogida: ${pickupDate}`;
      }

      // Obtener enlaces de contacto desde el servidor
      fetch('/get-contact-links')
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            let url = '';
            
            switch(selectedMethod) {
              case 'whatsapp':
                if (data.whatsappUrl) {
                  const whatsappMessage = encodeURIComponent(message);
                  url = `${data.whatsappUrl}&text=${whatsappMessage}`;
                } else {
                  showToast('error', 'Error', 'No hay enlace de WhatsApp configurado');
                  return;
                }
                break;
                
              case 'email':
                if (data.emailUrl) {
                  const emailSubject = encodeURIComponent('Apartado de Productos');
                  const emailBody = encodeURIComponent(message);
                  url = `${data.emailUrl}?subject=${emailSubject}&body=${emailBody}`;
                } else {
                  showToast('error', 'Error', 'No hay enlace de email configurado');
                  return;
                }
                break;
                
              case 'messenger':
                if (data.messengerUrl) {
                  const messengerMessage = encodeURIComponent(message);
                  url = `${data.messengerUrl}&text=${messengerMessage}`;
                } else {
                  showToast('error', 'Error', 'No hay enlace de Messenger configurado');
                  return;
                }
                break;
            }
            
            if (url) {
              window.open(url, '_blank');
              closeProcessModal();
              showToast('success', '¡Enviado!', `Mensaje enviado por ${selectedMethod === 'whatsapp' ? 'WhatsApp' : selectedMethod === 'email' ? 'Gmail' : 'Messenger'}`);
            }
          } else {
            showToast('error', 'Error', 'No se pudieron obtener los enlaces de contacto');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showToast('error', 'Error', 'Error al obtener enlaces de contacto');
        });
    }

    // Inicializar controles de selección al cargar la página
    document.addEventListener('DOMContentLoaded', function() {
      toggleSelectionControls();
      updateProcessButton();
      updateCartTotals();
    });
  </script>
</body>
</html> 